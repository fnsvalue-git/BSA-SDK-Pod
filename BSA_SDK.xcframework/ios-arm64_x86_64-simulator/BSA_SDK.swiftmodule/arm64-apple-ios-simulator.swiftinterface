// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name BSA_SDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Alamofire
import CoreMotion
import CryptoSwift
import DeviceKit
import Dispatch
import Foundation
import LocalAuthentication
import RxSwift
import Security
import StompClientLib
import Swift
import SwiftOTP
import SwiftyJSON
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
extension BSA_SDK.BSA {
  public enum RtCode : Swift.Int {
    case ERROR
    case SUCCESS
    case TYPE_CERT_TIME
    case TYPE_FINAL_CERT_TIME
    case PUSH_LOGIN
    case PUSH_LOGIN_CANCEL
    case PUSH_LOGIN_SUCCESS
    case PUSH_LOGIN_FAIL
    case PUSH_VERIFICATION_1
    case PUSH_VERIFICATION_2
    case PUSH_VERIFICATION_COMPLETE
    case COMM_FORBIDDEN_JOIN
    case COMM_FIND_CLIENT_FAIL
    case COMM_SERVER_ERROR
    case COMM_REQUEST_PARAM_ERROR
    case COMM_SESSION_ERROR
    case COMM_FIND_CHANNEL_FAIL
    case MEMBER_MAX_USER_LICENSE_EXPIRY
    case MEMBER_MAX_AUTH_LICENSE_EXPIRY
    case USER_NOT_REGISTER
    case USER_DEVICE_NOT_REGISTER
    case USER_MULTIPLE_JOIN
    case USER_AUTH_PROCESSING
    case COMM_FAIL_LICENSE_CONSISTENCY
    case COMM_MAINTENANCE_SERVER
    case MEMBER_LICENSE_TERM_EXPIRY
    case COMM_FIND_LICENSE_FAIL
    case COMM_DUPLICATE_CLIENT
    case COMM_DUPLICATE_LICENSE
    case COMM_DUPLICATE_REQUEST_LICENSE
    case COMM_FORBIDDEN
    case COMM_DUPLICATE_INFO
    case TOKEN_EXPIRED
    case TOKEN_BADSIGN
    case TOKEN_ACCESS_DENY
    case TOKEN_EMPTY
    case LICENSE_NOT_FOUND
    case LICENSE_KEY_ALREADY
    case LICENSE_EXPIRE
    case LICENSE_EXPIRE_DATE
    case LICENSE_EXPIRE_USER
    case LICENSE_DECODE_FAIL
    case LICENSE_INCONSISTENCY
    case COMM_FIND_QUESTION_NONE
    case COMM_FIND_ANSWER_NONE
    case COMM_FIND_PATCH_NOTE_NONE
    case USER_FIND_GCCS_INFO_AGREE_FAIL
    case MEMBER_FIND_AUTH_TYPE_FAIL
    case MEMBER_FIND_ICON_SELECT_FAIL
    case USER_FIND_PERSONAL_INFO_AGREE_FAIL
    case USER_FIND_UUID_INFO_AGREE_FAIL
    case MEMBER_AUTH_NOMAL
    case USER_FAIL_VALID_AUTH_NUM
    case MEMBER_FAIL_VAILD
    case MEMBER_FAIL_VAILD_DEVICE_ID
    case MEMBER_NO_ACCESS_ADMIN_PAGE
    case MEMBER_FIND_FCM_TOKEN_FAIL
    case MEMBER_FIND_STATUS_FAIL
    case USER_FAIL_TIMEOUT_AUTH_NUM
    case USER_FAIL_VALID_NAME
    case USER_FAIL_VALID_EMAIL
    case USER_FAIL_VALID_PHONE_NUM
    case USER_FIND_EMAIL_FAIL
    case USER_FIND_PHONE_FAIL
    case USER_FIND_FAIL
    case USER_VERIFY_CERTIFICATION_FAIL
    case USER_VERIFY_SIGN_FAIL
    case CLIENT_USER_REGISTER_FAIL
    case CLIENT_USER_NOT_REGISTER
    case CLIENT_USER_ALREADY_REGISTER
    case CLIENT_USER_EXTRA_REGISTER_FAIL
    case CLIENT_USER_VALID_ERROR
    case CLIENT_REGISTER_FAIL
    case CLIENT_UNKNOWN_LOGIN_TYPE
    case AD_INVALID_ACCESS_INFO
    case AUTH_CERT_TIME_OUT
    case AUTH_STATUS_TIMEOUT
    case AUTH_VAILD_SESSION_ID_FAIL
    case AUTH_VAILD_IP_FAIL
    case AUTH_FAIL_VAILD_BLOCK_KEY
    case AUTH_USER_STATUS_UNAPPROVAL
    case AUTH_USER_STATUS_TEMP
    case AUTH_USER_STATUS_PERM
    case AUTH_USER_STATUS_WITHDRAW
    case AUTH_FAIL
    case AUTH_CANCEL
    case AUTH_USER_STATUS_WAIT
    case AUTH_ICON_SELECT_FAIL
    case AUTH_ADD_CHANNEL_FAIL
    case AUTH_CREATE_NODE_FAIL
    case AUTH_SEND_PUSH_FAIL
    case AUTH_REQUEST_FAIL
    case AUTH_GET_CHANNEL_FAIL
    case AUTH_DATA_DECRYPT_FAIL
    case AUTH_VERIFICATION_REQUEST_FAIL
    case AUTH_VERIFICATION_FAIL
    case QR_ID_FAIL
    case QR_CLIENT_FAIL
    case TOTP_SECRET_KEY_FAIL
    case TOTP_TIMES_FAIL
    case OTP_GENERATE_FAIL
    case VERSION_INFO_NOT_FOUND
    case EVENT_HISTORY_NOT_FOUND
    case HISTORY_DATE_RANGE_EXCEED
    case COMM_FIND_AGREEMENT_NONE
    case AGREEMENT_NOT_ALLOWED
    case AGREEMENT_REGISTER_FAIL
    case CONFIG_NOT_FOUND
    case NOT_DEFINED_RTCODE
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension BSA_SDK.BSA.RtCode {
  public var localizedMessage: Swift.String {
    get
  }
}
extension BSA_SDK.BSA.FCM {
  public static var isAuthenticating: BSA_SDK.AtomicBoolean {
    get
  }
}
extension BSA_SDK.BSA {
  public enum Enums {
    public enum NoticePatchType : Swift.String {
      case web
      case Android
      case IOS
      case Windows
      case API
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum AgreementsLanguageCode : Swift.String {
      case english
      case korean
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum AgreementsType : Swift.String {
      case TermsOfUse
      case PrivacyPolicy
      case ConsentToInformationCollectionAndUse
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum VerifyType : Swift.String {
      case Email
      case PhoneNumber
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum LocalAuthType : Swift.Int {
      case None
      case BIOMETRIC
      case PASSCODE
      case UNKNOWN
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum NationalCode : Swift.String, Swift.CaseIterable {
      case Korean
      case Malaysia
      case Indonesia
      case Newzealand
      case Singapore
      case USA
      public init?(rawValue: Swift.String)
      public typealias AllCases = [BSA_SDK.BSA.Enums.NationalCode]
      public typealias RawValue = Swift.String
      public static var allCases: [BSA_SDK.BSA.Enums.NationalCode] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public enum OSType : Swift.String {
      case iOS
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum OTPType : Swift.String {
      case email
      case sms
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum AuthPlatform : Swift.String {
      case Others
      case BSAPortal
      case BSAApp
      case Windows
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum ProcessDescription : Swift.String {
      case BlockChainVerificationBegins
      case RequestingLocalAuthentication
      case ConfirmCompleteAuth
      case RequestingIssuanceToken
      case AuthSuccess
      case FinishByRestart
      case WaitForConnect
      case StartAuth
      case StartVerificationOfNodes
      case CompleteVerificationOfNodes
      case AuthCanceled
      case AuthFailed
      case AuthTimeout
      case InvalidStatus
      case ConnectSuccess
      case TimeOutByLocalTimer
      case Disconnect
      case APIError
      case BCNodeVerificationFailed
      case BCNodeVerificationError
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
  public enum Constant {
    public static let BASE_HTML: Swift.String
    public static let SERVICE_NAME: Swift.String
  }
}
extension BSA_SDK.BSA {
  @objc public class CountdownTimer : ObjectiveC.NSObject {
    public init(tag: Swift.String)
    @objc deinit
  }
}
extension BSA_SDK.BSA.CountdownTimer {
  public func startByRemainTimeFrom60Second(repeatCountdown: Swift.Bool, onSecond: @escaping (Swift.Int) -> (), onFire: @escaping () -> ())
  public func start(countDownSecond: Swift.Int, repeatCountdown: Swift.Bool, onSecond: @escaping (Swift.Int) -> (), onFire: @escaping () -> ())
  public func stopCountDown()
}
extension BSA_SDK.BSA {
  public enum HTTPLog {
    public static func createRequestLogBy(totalUrl: Swift.String, method: Alamofire.HTTPMethod, headers: Alamofire.HTTPHeaders?, params: Swift.Dictionary<Swift.String, Any>) -> Swift.String
    public static func createResponseLogBy(response: Swift.String) -> Swift.String
    public static func createResultLogBy(result: Swift.String) -> Swift.String
    public static func createErrorLogBy(errorMessage: Swift.String) -> Swift.String
    public static func createTotalLog(requestUrl: Swift.String, requestMethod: Alamofire.HTTPMethod, headers: Alamofire.HTTPHeaders?, requestParams: Swift.Dictionary<Swift.String, Any>, response: Swift.String, result: Swift.String) -> Swift.String
    public static func createTotalLog(requestUrl: Swift.String, requestMethod: Alamofire.HTTPMethod, headers: Alamofire.HTTPHeaders?, requestParams: Swift.Dictionary<Swift.String, Any>, response: Swift.String) -> Swift.String
    public static func createTotalLog(errorMessage: Swift.String, requestUrl: Swift.String, requestMethod: Alamofire.HTTPMethod, headers: Alamofire.HTTPHeaders?, requestParams: Swift.Dictionary<Swift.String, Any>) -> Swift.String
    public static func createTotalLog(errorMessage: Swift.String, requestUrl: Swift.String, requestMethod: Alamofire.HTTPMethod, headers: Alamofire.HTTPHeaders?, requestParams: Swift.Dictionary<Swift.String, Any>, response: Swift.String) -> Swift.String
  }
}
extension BSA_SDK.BSA {
  public class BlockChainNodesVerificater {
    public typealias WebSocketProcessing = (BSA_SDK.BSA.Enums.ProcessDescription) -> ()
    public typealias WebSocketFinish = () -> ()
    public typealias WebSocketCancel = () -> ()
    public typealias WebSocketError = (BSA_SDK.BSA.Error) -> ()
    public init()
    public func startVerification(qrId: Swift.String?, blockKey: Swift.String, websocketHeaders: [Swift.String : Swift.String]? = nil, websocketData: BSA_SDK.BSA.BlockChainNodesVerificater.WebsocketData, webSocketProcessing: BSA_SDK.BSA.BlockChainNodesVerificater.WebSocketProcessing?, webSocketFinish: BSA_SDK.BSA.BlockChainNodesVerificater.WebSocketFinish?, webSocketCancel: BSA_SDK.BSA.BlockChainNodesVerificater.WebSocketCancel?, webSocketError: BSA_SDK.BSA.BlockChainNodesVerificater.WebSocketError?)
    public func forceEndTheVerification()
    @objc deinit
  }
}
extension BSA_SDK.BSA.BlockChainNodesVerificater {
  public struct WebsocketData {
    public var apiName: BSA_SDK.BSA.APIName
    public var clientKey: Swift.String
    public var deviceId: Swift.String
    public var channelKey: Swift.String
    public var userKey: Swift.String?
    public var timeOutSeconds: Swift.Double
    public init(apiName: BSA_SDK.BSA.APIName, clientKey: Swift.String, deviceId: Swift.String, channelKey: Swift.String, userKey: Swift.String? = nil, timeOutSeconds: Swift.Double)
    public func makeConnectUrl() -> Swift.String
  }
  public struct VerificationData {
    public var qrId: Swift.String?
    public var blockKey: Swift.String
    public var websocketData: BSA_SDK.BSA.BlockChainNodesVerificater.WebsocketData
    public init(qrId: Swift.String?, blockKey: Swift.String, websocketData: BSA_SDK.BSA.BlockChainNodesVerificater.WebsocketData)
  }
}
extension Foundation.Date {
  public func currentTimeMillis() -> Swift.Int64
}
extension BSA_SDK.BSA {
  @objc @_inheritsConvenienceInitializers public class LocalAuthHelper : ObjectiveC.NSObject {
    public enum ErrorCode {
      case AUTH_FAILED
      case DOMAIN_STATE_CHANGED
      case USER_CANCEL
      case USER_FALLBACK
      case BIOMETRIC_NOT_AVILABLE
      case BIOMETRIC_LOCK_OUT
      case BIOMETRIC_NOT_ENROLLED_DEVICE
      case BIOMETRIC_NOT_SUPPORT_HARDWARE
      case PASSCODE_NOT_ENROLLED_DEVICE
      case WEAK_SELF_IS_NIL
      case SAVE_KEYCHAIN_FAILED
      public var errorMessage: Swift.String {
        get
      }
      public static func == (a: BSA_SDK.BSA.LocalAuthHelper.ErrorCode, b: BSA_SDK.BSA.LocalAuthHelper.ErrorCode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc override dynamic public init()
    @objc deinit
  }
}
extension BSA_SDK.BSA.LocalAuthHelper {
  public func startBiometricID(checkDomainStateChanged: Swift.Bool, usePasscodeWhenFailed: Swift.Bool, reason: Swift.String = "본인 확인을 위해 인증이 필요합니다", onSuccess: @escaping () -> (), onError: @escaping (BSA_SDK.BSA.LocalAuthHelper.ErrorCode?) -> ())
  public func isBiometricAuthChanged() -> BSA_SDK.BSA.LocalAuthHelper.ErrorCode?
}
extension BSA_SDK.BSA.LocalAuthHelper {
  public func startPasscode(reason: Swift.String = "본인 확인을 위해 인증이 필요합니다", onSuccess: @escaping () -> (), onError: @escaping (BSA_SDK.BSA.LocalAuthHelper.ErrorCode?) -> ())
}
extension BSA_SDK.BSA {
  public struct QRData {
    public var qrResult: Swift.Bool
    public var qrId: Swift.String?
    public var clientKey: Swift.String?
    public var authPlatform: Swift.String?
  }
  @objc @_inheritsConvenienceInitializers public class QRHelper : ObjectiveC.NSObject {
    public typealias VoidCallback = () -> ()
    public typealias Finished = (BSA_SDK.BSA.QRData) -> ()
    public typealias Failed = (BSA_SDK.BSA.QRError) -> ()
    public func checkCameraPermission(onGranted: BSA_SDK.BSA.QRHelper.VoidCallback?, onDenied: BSA_SDK.BSA.QRHelper.VoidCallback?)
    public func startQR(cameraParent: UIKit.UIView, onPreviewLayerAdded: (UIKit.UIView, QuartzCore.CALayer) -> (), onSuccess: BSA_SDK.BSA.QRHelper.Finished?, onFailed: BSA_SDK.BSA.QRHelper.Failed?)
    public func deinitialize()
    @objc override dynamic public init()
    @objc deinit
  }
}
extension BSA_SDK.BSA.QRHelper : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension BSA_SDK.BSA {
  public enum QRError : Swift.Error {
    case DeniedCameraPermission
    case FailedToCreateAVCaptureSession
    case FailedToCreateAVCaptureDevice
    case FailedToAddAVCaptureDeviceInput
    case ErrorOfAVCaptureDeviceInput(_: any Swift.Error)
    case FailedToAddAVCaptureDeviceOutput
    case InvalidQRCode
    case CustomMessage(_: Swift.String)
  }
}
extension BSA_SDK.BSA.QRError : Foundation.LocalizedError {
  public var localizedDescription: Swift.String {
    get
  }
}
public struct AtomicBoolean {
  public init()
  public var val: Swift.Bool {
    get
    set
  }
}
extension BSA_SDK.BSA {
  public enum FCM {
    public typealias Callback = (BSA_SDK.BSA.FCM.PushData) -> ()
  }
}
extension BSA_SDK.BSA.FCM {
  public enum PushType : Swift.String {
    case Request
    case Canceled
    case Success
    case Failed
    case Change
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class PushData {
    public var title: Swift.String
    public var body: Swift.String
    public var target: BSA_SDK.BSA.FCM.PushType
    public var clientName: Swift.String
    public var client_key: Swift.String
    public var siteUrl: Swift.String
    public var block_key: Swift.String
    public var channel_key: Swift.String
    public var gcm_message_id: Swift.String
    public var google_c_fid: Swift.String
    public var google_c_a_e: Swift.String
    public var google_c_sender_id: Swift.String
    public var otpAuth: Swift.Bool
    public var identifier: Swift.String
    public func toString() -> Swift.String
    public func clone() -> BSA_SDK.BSA.FCM.PushData
    @objc deinit
  }
}
extension BSA_SDK.BSA.FCM {
  public static func load(notification: UserNotifications.UNNotification) -> Swift.Bool
  public static func popData() -> BSA_SDK.BSA.FCM.PushData?
  public static func isLoadedPushData() -> Swift.Bool
}
extension BSA_SDK.BSA.FCM {
  public static func registerPushNotificationProcessor(_ callback: @escaping BSA_SDK.BSA.FCM.Callback)
  public static func checkRequestedAuthExists()
}
extension BSA_SDK.BSA.FCM {
  public static func tokenUpdate(fcmToken: Swift.String?)
  public static func runReservedTokenUpdate()
}
extension BSA_SDK.BSA.JSONData.CheckDeviceData {
  public func toString() -> Swift.String
}
extension BSA_SDK.BSA.JSONData.CheckRequestedAuthExistsData {
  public func toString() -> Swift.String
}
extension BSA_SDK.BSA {
  public class AutoAuthenticator {
    public init()
    public func getClientKey() -> Swift.String
    public func setData(qrData: BSA_SDK.BSA.QRData?, pushData: BSA_SDK.BSA.FCM.PushData?, clientKey: Swift.String, userKey: Swift.String, deviceId: Swift.String, otpAuth: Swift.Bool, sendPushMessage: Swift.Bool, localAuthType: BSA_SDK.BSA.Enums.LocalAuthType, usePasscodeWhenFailed: Swift.Bool, websocketHeaders: [Swift.String : Swift.String]? = nil) -> BSA_SDK.BSA.AutoAuthenticator
    public func setEvent(onProcessing: @escaping (BSA_SDK.BSA.Enums.ProcessDescription) -> (), onSuccess: @escaping () -> (), onCancel: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: @escaping BSA_SDK.BSA.APICaller.OnTotalLog) -> BSA_SDK.BSA.AutoAuthenticator
    public func start()
    public func stop()
    @objc deinit
  }
}
extension BSA_SDK.BSA {
  public enum TOTP {
  }
}
extension BSA_SDK.BSA.TOTP {
  public static func generateTOTP(timeInterval: Swift.Int = 60, onSuccess: @escaping (Swift.String) -> Swift.Void, onError: @escaping (BSA_SDK.BSA.Error) -> Swift.Void)
  public static func generateTOTP(timeInterval: Swift.Int = 60) -> (number: Swift.String?, error: BSA_SDK.BSA.Error?)
}
extension BSA_SDK.BSA {
  public enum APIName {
    case CheckAppVersion
    case CheckDeivce
    case CheckDuplicateUserData
    case CheckUserKeyAvailable
    case CheckRequestedAuthExists
    case GetAgreements
    case GetAgreementDetail
    case RequestSendOTPNumberByEmail
    case RequestSendOTPNumberBySMS
    case RequestSignUp
    case RequestSendOTPNumberForRegisterDevice
    case RequestRegisterDevice
    case RequestUnregisterDevice
    case RequestUnregisterAccount
    case RequestStartAuth
    case RequestStartBlockChainNodesVerification
    case RequestCancelAuth
    case ConfirmCompleteAuth
    case IssuanceAccessToken
    case IssuanceOTPNumber
    case IssuanceCancelForOTPNumber
    case VerifyOTPNumberForEmail
    case VerifyOTPNumberForSMS
    case ChangeLocalAuthType
    case ChangeFCMToken
    case RetrieveAuthHistory
    case RetrieveNotice
    case RetrieveLinkedSiteList
    case RetrieveSiteList
    case RequestVerifySiteAccount
    case RequestLinkSite
    case RequestUnlinkSite
    case WebsocketUrl
    public static func == (a: BSA_SDK.BSA.APIName, b: BSA_SDK.BSA.APIName) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension BSA_SDK.BSA.LocalAuthHelper {
  public func isBiometricAuthChangedInternal(policy: LocalAuthentication.LAPolicy = .deviceOwnerAuthenticationWithBiometrics) -> BSA_SDK.BSA.LocalAuthHelper.ErrorCode?
}
extension BSA_SDK.BSA {
  public enum JSONData {
  }
}
extension BSA_SDK.BSA.JSONData {
  public struct SimpleRtCodeJSON {
    public var rtCode: Swift.Int
    public init(json: SwiftyJSON.JSON)
  }
  public struct AppVersionJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.AppVersionData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct AppVersionData {
    public var os: Swift.String
    public var regDt: Swift.String
    public var storeUrl: Swift.String
    public var version: Swift.Int
    public var seq: Swift.Int
    public var updateFlag: Swift.Int
    public var packageName: Swift.String
    public var emergencyMessage: Swift.String
    public init(json: SwiftyJSON.JSON)
  }
  public struct CheckDeviceJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.CheckDeviceData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct CheckDeviceData {
    public var userKey: Swift.String
    public var name: Swift.String
    public var phoneNum: Swift.String
    public var email: Swift.String
    public var authType: Swift.Int
    public var uptDt: Swift.String
    public init(json: SwiftyJSON.JSON)
    public init(userKey: Swift.String, name: Swift.String, phoneNum: Swift.String, email: Swift.String, authType: Swift.Int, uptDt: Swift.String)
  }
  public struct CheckRequestedAuthExistsJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.CheckRequestedAuthExistsData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct CheckRequestedAuthExistsData {
    public var isExist: Swift.Bool
    public var clientKey: Swift.String
    public var clientName: Swift.String
    public var siteURL: Swift.String
    public var timeout: Swift.String
    public init(json: SwiftyJSON.JSON)
    public init(isExist: Swift.Bool, clientKey: Swift.String, clientName: Swift.String, siteURL: Swift.String, timeout: Swift.String)
  }
  public struct NoticeJSON {
    public var rtCode: Swift.Int
    public var arrayData: [BSA_SDK.BSA.JSONData.NoticeData]?
    public var page: BSA_SDK.BSA.JSONData.NoticePage?
    public init(json: SwiftyJSON.JSON)
  }
  public struct NoticePage {
    public var first: Swift.Bool
    public var last: Swift.Bool
    public var currentPage: Swift.Int
    public var pageSize: Swift.Int
    public var totalElements: Swift.Int
    public var totalPages: Swift.Int
    public init(json: SwiftyJSON.JSON)
  }
  public struct NoticeData {
    public var seq: Swift.Int
    public var version: Swift.String
    public var patchType: Swift.String
    public var title: Swift.String
    public var regUserName: Swift.String
    public var content: Swift.String
    public var deployDt: Swift.String
    public var regDt: Swift.String
    public init(json: SwiftyJSON.JSON)
  }
  public struct AgreementsJSON {
    public var rtCode: Swift.Int
    public var arrayData: [BSA_SDK.BSA.JSONData.AgreementData]?
    public init(json: SwiftyJSON.JSON)
  }
  public struct AgreementData {
    public var clientKey: Swift.String
    public var useStatus: Swift.String
    public var lang: Swift.String
    public var seq: Swift.Int
    public var title: Swift.String
    public var type: Swift.String
    public init(json: SwiftyJSON.JSON)
  }
  public struct AgreementsDetailJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.AgreementDetailData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct AgreementDetailData {
    public var subCltBhv: Swift.String
    public var useStatus: Swift.String
    public var regDt: Swift.String
    public var lang: Swift.String
    public var clientKey: Swift.String
    public var clientName: Swift.String
    public var regUserKey: Swift.String
    public var title: Swift.String
    public var seq: Swift.Int
    public var content: Swift.String
    public var type: Swift.String
    public init(json: SwiftyJSON.JSON)
  }
  public struct VerifyOTPNumberJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.VerifyOTPNumberData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct VerifyOTPNumberData {
    public var result: Swift.Bool
    public var disposeToken: Swift.String?
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestSignUpJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.RequestSignUpData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestSignUpData {
    public var TOTPSecretKey: Swift.String?
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestSendOTPNumberForRegisterDeviceJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.RequestSendOTPNumberForRegisterDeviceData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestSendOTPNumberForRegisterDeviceData {
    public var result: Swift.Bool
    public var authType: Swift.Int
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestStartAuthJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.RequestStartAuthData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestStartAuthData {
    public var userKey: Swift.String
    public var channelKey: Swift.String
    public var blockKey: Swift.String
    public var connectIp: Swift.String
    public var authTimeRemaining: Swift.Int
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestStartBCNodesVerificationJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.RequestStartBCNodesVerificationData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct RequestStartBCNodesVerificationData {
    public var userKey: Swift.String
    public var channelKey: Swift.String
    public var blockKey: Swift.String
    public var connectIp: Swift.String
    public var authType: Swift.Int
    public var authTimeRemaining: Swift.Int
    public init(json: SwiftyJSON.JSON)
  }
  public struct IssuanceAccessTokenJSON {
    public var rtCode: Swift.Int
    public var data: Swift.String?
    public init(json: SwiftyJSON.JSON)
  }
  public struct IssuanceOTPNumberJSON {
    public var rtCode: Swift.Int
    public var data: Swift.String?
    public init(json: SwiftyJSON.JSON)
  }
  public struct ChangeLocalAuthTypeJSON {
    public var rtCode: Swift.Int
    public var data: BSA_SDK.BSA.JSONData.ChangeLocalAuthTypeData?
    public init(json: SwiftyJSON.JSON)
  }
  public struct ChangeLocalAuthTypeData {
    public var authType: Swift.Int
    public init(json: SwiftyJSON.JSON)
  }
  public struct AuthHistoryJSON {
    public var rtCode: Swift.Int
    public var arrayData: [BSA_SDK.BSA.JSONData.AuthHistoryData]?
    public var page: BSA_SDK.BSA.JSONData.AuthHistoryPage?
    public init(json: SwiftyJSON.JSON)
  }
  public struct AuthHistoryPage {
    public var first: Swift.Bool
    public var last: Swift.Bool
    public var currentPage: Swift.Int
    public var pageSize: Swift.Int
    public var totalElements: Swift.Int
    public var totalPages: Swift.Int
    public init(json: SwiftyJSON.JSON)
  }
  public struct AuthHistoryData {
    public var seq: Swift.Int
    public var userKey: Swift.String
    public var clientKey: Swift.String
    public var clientName: Swift.String
    public var status: Swift.String
    public var platform: Swift.String
    public var content: Swift.String
    public var connectIp: Swift.String
    public var regDt: Swift.String
    public var regDt_ko: Swift.String
    public var regDt_en: Swift.String
    public init(json: SwiftyJSON.JSON)
    public func getFormattedRegDt(lang: Swift.String) -> Swift.String
  }
  public struct LinkedSiteListJSON {
    public var rtCode: Swift.Int
    public var arrayData: [BSA_SDK.BSA.JSONData.LinkedSiteListData]?
    public init(json: SwiftyJSON.JSON)
  }
  public struct LinkedSiteListData {
    public var seq: Swift.Int
    public var clientKey: Swift.String
    public var clientName: Swift.String
    public var userStatus: Swift.String
    public var clientExplain: Swift.String?
    public var siteUrl: Swift.String
    public var interlock: Swift.Bool
    public var verifyType: Swift.String
    public init(json: SwiftyJSON.JSON)
  }
  public struct SiteListJSON {
    public var rtCode: Swift.Int
    public var arrayData: [BSA_SDK.BSA.JSONData.SiteListData]?
    public init(json: SwiftyJSON.JSON)
  }
  public struct SiteListData {
    public var seq: Swift.Int
    public var clientKey: Swift.String
    public var clientName: Swift.String
    public var siteUrl: Swift.String
    public var interlock: Swift.Bool
    public var verifyType: Swift.String
    public init(json: SwiftyJSON.JSON)
    public init(seq: Swift.Int, clientKey: Swift.String, clientName: Swift.String, siteUrl: Swift.String, interlock: Swift.Bool, verifyType: Swift.String)
  }
  public struct VerifySiteAccountJSON {
    public var rtCode: Swift.Int
    public var token: Swift.String
    public init(json: SwiftyJSON.JSON)
  }
  public struct LinkSiteJSON {
    public var rtCode: Swift.Int
    public var data: Swift.Bool
    public init(json: SwiftyJSON.JSON)
  }
}
extension BSA_SDK.BSA {
  public enum SignUpData {
  }
}
extension BSA_SDK.BSA.SignUpData {
  @objc @_inheritsConvenienceInitializers public class UserData : ObjectiveC.NSObject {
    public var appPackage: Swift.String
    public var clientKey: Swift.String
    public var appVersion: Swift.String
    public var token: Swift.String?
    public var email: Swift.String
    public var phoneNum: Swift.String
    public var userKey: Swift.String
    public var name: Swift.String
    public var authType: BSA_SDK.BSA.Enums.LocalAuthType
    public var os: BSA_SDK.BSA.Enums.OSType
    public var disposeToken: Swift.String
    public var agreeGccs: Swift.Bool
    public var agreePerson: Swift.Bool
    public var agreeDevice: Swift.Bool
    @objc override dynamic public init()
    public init(appPackage: Swift.String, clientKey: Swift.String, appVersion: Swift.String, email: Swift.String, phoneNum: Swift.String, userKey: Swift.String, name: Swift.String, authType: BSA_SDK.BSA.Enums.LocalAuthType, os: BSA_SDK.BSA.Enums.OSType, disposeToken: Swift.String, token: Swift.String, agreeGccs: Swift.Bool, agreePerson: Swift.Bool, agreeDevice: Swift.Bool)
    public func toString() -> Swift.String
    @objc deinit
  }
}
extension BSA_SDK.BSA.SignUpData {
  @objc @_inheritsConvenienceInitializers public class ExistingUserData : ObjectiveC.NSObject {
    public var appPackage: Swift.String
    public var clientKey: Swift.String
    public var appVersion: Swift.String
    public var token: Swift.String?
    public var email: Swift.String
    public var phoneNum: Swift.String
    public var userKey: Swift.String
    public var name: Swift.String
    public var os: BSA_SDK.BSA.Enums.OSType
    public var disposeToken: Swift.String
    public var otpType: BSA_SDK.BSA.Enums.OTPType
    public var authType: BSA_SDK.BSA.Enums.LocalAuthType
    @objc override dynamic public init()
    public init(appPackage: Swift.String, clientKey: Swift.String, appVersion: Swift.String, email: Swift.String, phoneNum: Swift.String, userKey: Swift.String, name: Swift.String, os: BSA_SDK.BSA.Enums.OSType, disposeToken: Swift.String, token: Swift.String, authType: BSA_SDK.BSA.Enums.LocalAuthType, otpType: BSA_SDK.BSA.Enums.OTPType)
    public func toString() -> Swift.String
    @objc deinit
  }
}
extension BSA_SDK.BSA {
  @_hasMissingDesignatedInitializers public class KeyChainHelper {
    public static func saveToKeyChain(service: Swift.String, account: Swift.String, saveString: Swift.String) -> Swift.Bool
    public static func saveToKeyChain(service: Swift.String, account: Swift.String, saveData: Foundation.Data) -> Swift.Bool
    public static func loadFromKeychain(service: Swift.String, account: Swift.String) -> Foundation.Data?
    public static func loadStringFromKeychain(service: Swift.String, account: Swift.String) -> Swift.String?
    public static func removeFromKeyChain(service: Swift.String, account: Swift.String) -> Swift.Bool
    @objc deinit
  }
}
extension BSA_SDK.BSA {
  public enum APICaller {
    public typealias OnError = (any Swift.Error) -> ()
    public typealias OnFailed = (BSA_SDK.BSA.RtCode, Swift.String) -> ()
    public typealias OnTokenExpired = (BSA_SDK.BSA.RtCode, Swift.String) -> ()
    public typealias OnTotalLog = (Swift.String) -> ()
    public typealias OnCompleted = () -> ()
    public enum VerifyType {
      case Email, SMS
      public static func == (a: BSA_SDK.BSA.APICaller.VerifyType, b: BSA_SDK.BSA.APICaller.VerifyType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
}
extension BSA_SDK.BSA.APICaller {
  public static func checkAppVersion(bundleIdentifier: Swift.String, clientAppVersion: Swift.String, os: BSA_SDK.BSA.Enums.OSType = .iOS, onSuccess: @escaping (BSA_SDK.BSA.JSONData.AppVersionData) -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func checkDevice(bundleIdentifier: Swift.String, clientKey: Swift.String, onSuccessByRegistered: @escaping (BSA_SDK.BSA.JSONData.CheckDeviceData) -> (), onSuccessByNotRegistered: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func checkDuplicateUserData(verifyData: Swift.String, verifyType: BSA_SDK.BSA.Enums.VerifyType, onNotDulplicateUser: @escaping () -> (), onDulplicateUser: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func checkUserKeyAvailable(userKey: Swift.String, onUserKeyAvailable: @escaping () -> (), onUserKeyNotAvailable: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func checkRequestedAuthExists(userKey: Swift.String, onExist: @escaping (BSA_SDK.BSA.JSONData.CheckRequestedAuthExistsData) -> (), onNotExist: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil) -> (any RxSwift.Disposable)?
  public static func getAgreements(languageCode: BSA_SDK.BSA.Enums.AgreementsLanguageCode, clientKey: Swift.String, onSuccess: @escaping ([BSA_SDK.BSA.JSONData.AgreementData]) -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func getAgreementDetail(seq: Swift.Int, clientKey: Swift.String, onSuccess: @escaping (BSA_SDK.BSA.JSONData.AgreementDetailData) -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestSendOTPNumber(ByEmail emailAddress: Swift.String, clientKey: Swift.String, bundleIdentifier: Swift.String, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  @available(*, deprecated, renamed: "requestSendOTPNumber", message: "The function name has changed. Use the requestSendOTPNumber instead")
  public static func requestOTPNumberSend(ByEmail emailAddress: Swift.String, clientKey: Swift.String, bundleIdentifier: Swift.String, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestSendOTPNumber(BySMS phoneNumber: Swift.String, clientKey: Swift.String, bundleIdentifier: Swift.String, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  @available(*, deprecated, renamed: "requestSendOTPNumber", message: "The function name has changed. Use the requestSendOTPNumber instead")
  public static func requestOTPNumberSend(BySMS phoneNumber: Swift.String, clientKey: Swift.String, bundleIdentifier: Swift.String, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestSignUp(userData: BSA_SDK.BSA.SignUpData.UserData, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestSendOTPNumberForRegisterDevice(clientKey: Swift.String, userKey: Swift.String, name: Swift.String, verifyType: BSA_SDK.BSA.Enums.VerifyType, verifyData: Swift.String, bundleIdentifier: Swift.String, onSuccess: @escaping (BSA_SDK.BSA.Enums.LocalAuthType) -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestRegisterDevice(existingUserData: BSA_SDK.BSA.SignUpData.ExistingUserData, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestUnregisterDevice(userKey: Swift.String, onSuccess: @escaping () -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestUnregisterAccount(onSuccess: @escaping () -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestStartAuth(qrId: Swift.String?, clientKey: Swift.String, userKey: Swift.String, deviceId: Swift.String?, authPlatform: BSA_SDK.BSA.Enums.AuthPlatform, otpAuth: Swift.Bool, onSuccess: @escaping (BSA_SDK.BSA.JSONData.RequestStartAuthData) -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestStartBlockChainNodesVerification(qrId: Swift.String?, clientKey: Swift.String, deviceId: Swift.String, channelKey: Swift.String, blockKey: Swift.String, onSuccess: @escaping (BSA_SDK.BSA.JSONData.RequestStartBCNodesVerificationData) -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestCancelAuth(qrId: Swift.String?, clientKey: Swift.String, deviceId: Swift.String, userKey: Swift.String, sendPushMessage: Swift.Bool, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func confirmCompleteAuth(qrId: Swift.String?, clientKey: Swift.String, deviceId: Swift.String, isSecondaryCertification: Swift.Bool, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func issuanceAccessToken(qrId: Swift.String?, clientKey: Swift.String, deviceId: Swift.String, userKey: Swift.String, targetUserKey: Swift.String, channelKey: Swift.String, sendPushMsg: Swift.Bool, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func issuanceOTPNumber(onSuccess: @escaping (Swift.String) -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func IssuanceCancelForOTPNumber(otpNumber: Swift.String, onSuccess: @escaping () -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func verifyOTPNumber(ForEmail email: Swift.String, otpNumber: Swift.String, clientKey: Swift.String, onValidOTPNumber: @escaping (Swift.String) -> (), onInvalidOTPNumber: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func verifyOTPNumber(ForSMS phoneNumber: Swift.String, otpNumber: Swift.String, clientKey: Swift.String, onValidOTPNumber: @escaping (Swift.String) -> (), onInvalidOTPNumber: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func verifyOTPNumber(verifyType: BSA_SDK.BSA.APICaller.VerifyType, verifyData: Swift.String, otpNumber: Swift.String, clientKey: Swift.String, onValidOTPNumber: @escaping (Swift.String) -> (), onInvalidOTPNumber: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func changeLocalAuthType(authType: BSA_SDK.BSA.Enums.LocalAuthType, onSuccess: @escaping () -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func changeFCMToken(deviceId: Swift.String, fcmToken: Swift.String, onSuccess: @escaping () -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil) -> (any RxSwift.Disposable)?
  public static func retrieveAuthHistory(pageIndex: Swift.Int?, size: Swift.Int?, sort: Swift.String = "REG_DT,DESC", onSuccess: @escaping ([BSA_SDK.BSA.JSONData.AuthHistoryData], BSA_SDK.BSA.JSONData.AuthHistoryPage) -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func retrieveNotice(clientKey: Swift.String, pageIndex: Swift.Int?, pageSize: Swift.Int?, onSuccess: @escaping ([BSA_SDK.BSA.JSONData.NoticeData], BSA_SDK.BSA.JSONData.NoticePage) -> (), onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func retrieveLinkedSiteList(onSuccess: @escaping ([BSA_SDK.BSA.JSONData.LinkedSiteListData]) -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func retrieveSiteList(clientName: Swift.String?, onSuccess: @escaping ([BSA_SDK.BSA.JSONData.SiteListData]) -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestVerifySiteAccount(siteClientKey: Swift.String, siteID: Swift.String, sitePassword: Swift.String, onSuccess: @escaping (Swift.String) -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestLinkSite(siteClientKey: Swift.String, siteToken: Swift.String?, onSuccess: @escaping () -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
  public static func requestUnlinkSite(siteClientKey: Swift.String, onSuccess: @escaping () -> (), onTokenExpired: @escaping BSA_SDK.BSA.APICaller.OnTokenExpired, onFailed: @escaping BSA_SDK.BSA.APICaller.OnFailed, onError: @escaping BSA_SDK.BSA.APICaller.OnError, onTotalLog: BSA_SDK.BSA.APICaller.OnTotalLog? = nil, onCompleted: BSA_SDK.BSA.APICaller.OnCompleted? = nil, disposeBag: RxSwift.DisposeBag)
}
@_hasMissingDesignatedInitializers public class PCGPrint {
  public static func d<T>(_ object: T?, fileName: Swift.String = #file, line: Swift.Int = #line, funcName: Swift.String = #function)
  public static func v<T>(_ object: T?, fileName: Swift.String = #file, line: Swift.Int = #line, funcName: Swift.String = #function)
  public static func s<T>(_ object: T?, fileName: Swift.String = #file, line: Swift.Int = #line, funcName: Swift.String = #function)
  public static func p<T>(_ object: T?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
public class BSA {
  public static let VERSION: Swift.String
  public static var checkInitialized: Swift.Bool {
    get
  }
  public static var serverUrl: Swift.String {
    get
  }
  public static var websocketUrl: Swift.String {
    get
  }
  public static func getTotalApiUrl(apiName: BSA_SDK.BSA.APIName) -> Swift.String
  public static func getTotalWebsocketUrl(apiName: BSA_SDK.BSA.APIName) -> Swift.String
  public static func initialize(serverUrl: Swift.String, websocketUrl: Swift.String, securityKey: Swift.String, removeToken: Swift.Bool = true)
  public static func setServerUrl(serverUrl: Swift.String, websocketUrl: Swift.String)
  public static func getPreferredLanguagesCode() -> Swift.String
  @objc deinit
}
extension BSA_SDK.BSA {
  public static func loadTOTPSecretKey() -> Swift.String?
  public static func loadDeviceID() -> Swift.String?
  public static func loadAccessToken() -> Swift.String?
  public static func removeAccessToken() -> Swift.Bool
  public static func loadLocalAuthType() -> BSA_SDK.BSA.Enums.LocalAuthType?
  public static func loadFCMToken() -> Swift.String?
  public static func loadUserKey() -> Swift.String?
  public static func removeAccountData()
}
extension BSA_SDK.BSA {
  public enum LocalAuth {
    public static func startSimpleAuth(localAuthType: BSA_SDK.BSA.Enums.LocalAuthType, reason: Swift.String = "본인 확인을 위해 인증이 필요합니다", checkDomainStateChanged: Swift.Bool, usePasscodeWhenFailed: Swift.Bool, onSuccess: @escaping () -> (), onError: @escaping (BSA_SDK.BSA.LocalAuthHelper.ErrorCode?) -> ())
    public static func isBiometricAuthChanged() -> BSA_SDK.BSA.LocalAuthHelper.ErrorCode?
  }
}
extension BSA_SDK.BSA {
  public static func testCall(message msg: Swift.String)
}
extension BSA_SDK.BSA {
  public enum Error : Swift.Error {
    case CustomMessage(_: Swift.String)
    case CustomMessageWithErrorCode(_: Swift.Int, _: Swift.String)
    case SDK_NotInitialized
    case API_CheckAppVersionFailed
    case UUID_CreateFailed
    case UUID_LoadFailed
    case AccessToken_LoadFailed
    case AF_Error(_: Swift.String)
    case AF_RequestFailed
    case AF_ResponseDataToUTF8ConvertFailed
    case AF_ResponseDataIsInvalid
    case JSON_DecodingFailed
    case JSON_DataToUTF8Failed
    case HTTP_ResponseSuccessButDataIsNil(_: Swift.String)
    case HTTP_JSONConvertFailed(_: Swift.String)
    case HTTP_AFError(_: Swift.String)
    case TOTP_GenerateFailed
    case TOTP_SetupFailed
    case TOTP_DecodeDataFailed
    case TOTP_SecKeyIsEmpty
    case KEYCHAIN_saveFailed(_: Swift.String)
    case WEBSOCKET_URL_InvalidString(_: Swift.String)
    case WEBSOCKET_BSA_APICallFailed(_: Swift.String, _: Swift.String)
    case WEBSOCKET_InvalidStatus(_: Swift.String)
    case WEBSOCKET_ConnectFailed(_: Swift.String)
    case WEBSOCKET_TIMEOUT
    public static func parseDescription(_ error: any Swift.Error) -> Swift.String
    public static func parse(_ error: any Swift.Error) -> BSA_SDK.BSA.Error
  }
}
extension BSA_SDK.BSA.Error : Foundation.LocalizedError {
  public var localizedDescription: Swift.String {
    get
  }
}
extension BSA_SDK.BSA.RtCode : Swift.Equatable {}
extension BSA_SDK.BSA.RtCode : Swift.Hashable {}
extension BSA_SDK.BSA.RtCode : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.NoticePatchType : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.NoticePatchType : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.NoticePatchType : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.AgreementsLanguageCode : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.AgreementsLanguageCode : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.AgreementsLanguageCode : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.AgreementsType : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.AgreementsType : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.AgreementsType : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.VerifyType : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.VerifyType : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.VerifyType : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.LocalAuthType : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.LocalAuthType : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.LocalAuthType : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.NationalCode : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.NationalCode : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.NationalCode : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.OSType : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.OSType : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.OSType : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.OTPType : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.OTPType : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.OTPType : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.AuthPlatform : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.AuthPlatform : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.AuthPlatform : Swift.RawRepresentable {}
extension BSA_SDK.BSA.Enums.ProcessDescription : Swift.Equatable {}
extension BSA_SDK.BSA.Enums.ProcessDescription : Swift.Hashable {}
extension BSA_SDK.BSA.Enums.ProcessDescription : Swift.RawRepresentable {}
extension BSA_SDK.BSA.LocalAuthHelper.ErrorCode : Swift.Equatable {}
extension BSA_SDK.BSA.LocalAuthHelper.ErrorCode : Swift.Hashable {}
extension BSA_SDK.BSA.FCM.PushType : Swift.Equatable {}
extension BSA_SDK.BSA.FCM.PushType : Swift.Hashable {}
extension BSA_SDK.BSA.FCM.PushType : Swift.RawRepresentable {}
extension BSA_SDK.BSA.APIName : Swift.Equatable {}
extension BSA_SDK.BSA.APIName : Swift.Hashable {}
extension BSA_SDK.BSA.APICaller.VerifyType : Swift.Equatable {}
extension BSA_SDK.BSA.APICaller.VerifyType : Swift.Hashable {}
